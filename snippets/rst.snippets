# =======
# chapter  (not in rst, but in Jessica's theme)
# =======

# sec (section in rst)
# ===

# sub (subsection in rst)
# ---

# ssub (subsubsection in rst)
# ^^^^

# sssub (paragraph in rst)
# ,,,,,



global !p
import re
import vim
import uuid
import datetime

def debug(thing):
    # to debug: debug(<var>)
    # then
    # tail -f /tmp/ultisnips_debug.log
    with open("/tmp/ultisnips_debug.log", "a") as f:
        f.write("Debug infor: {}\n".format(thing))

def hypertarget(filename, t):
  return '..' ' _' + filename + '__' + re.sub(r'([ ?]{1,})', '_', t).lower() + ':'

def captalize_words(t):
	return " ".join([word.capitalize() for word in t.split()])

def current_date():
	now = datetime.datetime.now()
	return now.strftime("%Y-%m-%d")

def from_options(t, options):
  if t:
    options = [m[len(t):] for m in options if m.startswith(t)]
  if len(options) == 1:
    return options[0]
  else:
    return "(" + "|".join(options) + ")"

def from_dict_options(t, options_dict):
    if not t:
        # When no text is typed, show all keys as possible completions
        return "(" + "|".join(options_dict.keys()) + ")"

    if t in options_dict:
        replacement = options_dict[t]
        if replacement.startswith(t):
            # Partial replacement: return the remaining part to append
            return replacement[len(t):]
        else:
            return t

    # Handle partial matches for autocompletion
    matching_keys = [k for k in options_dict.keys() if k.startswith(t)]
    if matching_keys:
        # Extract the remaining parts of matching keys
        remaining = [k[len(t):] for k in matching_keys]
        # Join them with "|" for UltiSnips to display as completion options
        return "(" + "|".join(r for r in remaining if r) + ")"

    # If no matches found, return an empty string
    return ""

def dict_expand(spec):
    options_dict = spec

    result = from_dict_options(t[1], options_dict)
    snip.rv = result
    if result in options_dict:
        current_word = vim.eval("expand('<cword>')")
        #with open('/tmp/ultisnips_debug.txt', 'a') as f:
        #    f.write(f"current_word: {current_word}\n")
        snip.rv = ':' + options_dict[result]


def post_process(abbr, replacement):
    # Get the current buffer and cursor position
    buffer = vim.current.buffer
    cursor_row, cursor_col = vim.current.window.cursor

    # Get the current line
    current_line = buffer[cursor_row - 1]

    # Split the line into words
    words = current_line.split()

    if not words:
        return  # Nothing to process

    # Check if the last word is the abbreviation
    if words[-1] == abbr:
        if replacement:
            # Replace the abbreviation with the replacement
            words[-1] = replacement
            new_line = ' '.join(words)
            buffer[cursor_row - 1] = new_line

            # Move the cursor to the end of the replacement
            vim.current.window.cursor = (cursor_row, len(new_line))
    else:
        # The abbreviation is not at the end; no action needed
        pass


def _uuid():
    return str(uuid.uuid4())

def _uuidh():
    return uuid.uuid4().hex



endglobal


snippet abr "abbreviation" 
:abbr:\`${1:short}(${2:the long form})\`
endsnippet

snippet code "code block" b
.. code-block:: ${1:python}

  $2
endsnippet

snippet codel "code block with lines and emphasis" b
.. code-block:: ${1:python}
  :emphasize-lines: 1
  :linenos:

  $2
endsnippet

snippet "part" "Writing a part header" rb
${2:`!p snip.rv = hypertarget(snip.basename, t[1])`}

${1:${VISUAL:section_title}}
${3:`!p snip.rv = '#' * len(t[1])`}

$0
endsnippet

snippet "\#\#" "Writing a chapter header" rb
${2:`!p snip.rv = hypertarget(snip.basename, t[1])`}

${1:${VISUAL:section_title}}
${3:`!p snip.rv = '#' * (len(t[1]))`}

$0
endsnippet

snippet "chapter" "Writing a chapter header" rb
#${2:`!p snip.rv = hypertarget(snip.basename, t[1])`}

#${4:`!p snip.rv = '#' * (len(t[1]) + 1)`}
# ${1:${VISUAL:section_title}}
#${3:`!p snip.rv = '#' * (len(t[1]) + 1)`}

$0
endsnippet

snippet "\=\=" "Writing a section header" rb
${2:`!p snip.rv = hypertarget(snip.basename, t[1])`}

${1:${VISUAL:section_title}}
${3:`!p snip.rv = '=' * len(t[1])`}

$0
endsnippet

snippet "sec" "Writing a section header" rb
${2:`!p snip.rv = hypertarget(snip.basename, t[1])`}

${1:${VISUAL:section_title}}
${3:`!p snip.rv = '=' * len(t[1])`}

$0
endsnippet

snippet "\*\*" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsection title}}
`!p snip.rv = '*' * len(t[1])`
$0
endsnippet

snippet "sub" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsection title}}
`!p snip.rv = '*' * len(t[1])`
$0
endsnippet

snippet "\-\-" "Writing a subsubtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsection_title}}
`!p snip.rv = '-' * len(t[1])`
$0
endsnippet

snippet "ssub" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsection_title}}
`!p snip.rv = '-' * len(t[1])`
$0
endsnippet

snippet "\^\^" "Writing a subsubsubtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsubsection_title}}
`!p snip.rv = '^' * len(t[1])`
$0
endsnippet

snippet "sssub" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsubsection_title}}
`!p snip.rv = '^' * len(t[1])`
$0
endsnippet

snippet "\"\"" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsubsection_title}}
`!p snip.rv = '"' * len(t[1])`
$0
endsnippet

snippet "ssssub" "Writing a subtitle" rb
`!p snip.rv = hypertarget(snip.basename, t[1])`

${1:${VISUAL:subsubsubsection_title}}
`!p snip.rv = '"' * len(t[1])`
$0
endsnippet

snippet glos "Write a glossary item" b
	 ${1:name of item}
			${2:Description of $1}

$0
endsnippet

snippet toc "add a submenu" b
.. toctree::
   :maxdepth: 2

   $1
endsnippet

snippet contents "add a table of contents" b
.. contents::
   :depth: $1
   :local:
   :backlinks: none
   :class: page-toc
endsnippet

#snippet term "reference a glossary item" 
#:term:\`${1:name} <${2:`!p snip.rv = captalize_words(t[1])`}>\`
#endsnippet

snippet term "reference a glossary item" 
:term:\`${1:${VISUAL:name}}`
endsnippet

snippet ref "reference to a link"
:ref:\`${1:name} <${2:name of link}>\`
endsnippet

snippet link "create a link"
\`$1 <$2>\`_
endsnippet

snippet image "Add an image" b
.. figure:: /_static/$1.svg
    :target: /_static/$1.pdf
    :class: noscale-center white-bg

    source file: \`\`_static/$1.uxf\`\`
$0
endsnippet

snippet video "Add a video" b
.. raw:: html

  <div class="video-content">
    <iframe src="$1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
  </div>

$0
endsnippet

snippet note "Add a note" b
.. note::

  $0
endsnippet

snippet '' "fixed text"
\`\`$1\`\` $0
endsnippet

snippet ttr "Things to Remember" b
.. admonition:: Things to Remember

  $0
endsnippet

snippet comment "Comment" b
.. admonition:: Scott Volk: `!p snip.rv = current_date()`

  $0
endsnippet

snippet date "Insert current date" b
\`\``!v strftime("%Y-%m-%d")`\`\`
endsnippet

snippet uuid "Insert UUID" 
`!p if not snip.c: snip.rv = _uuid()`
endsnippet

snippet uuidh "Insert UUID as hex" 
`!p if not snip.c: snip.rv = _uuidh()`
endsnippet

snippet meta "meta non-instruction of the protocol compendium"
:protocols: P00X.Y
:uuid: `!p if not snip.c: snip.rv=_uuid()`
:instruction: $1`!p snip.rv=from_options(t[1], [
'instruction', 'technique', 'trick', 'article', 'story', 'pitfall', 'question',
'link', 'aphorism'
])`
:roles: roles$0
:ai-roles: ai-roles
:difficulty: difficulty
:prerequisites:
:related-to: 
:tags: tag

.. end-content
endsnippet

snippet protocol "protocol for the protocol compendium"
$1`!p snip.rv=from_options(t[1], ['P001', 'P002'])`
endsnippet

snippet instruction "instruction type for the protocol compendium"
$1`!p dict_expand({
    'in': 'instructions',
    'tech': 'technique',
    'tr': 'trick',
    'art': 'article',
    'st': 'story',
    'pit': 'pitfall',
    'lnk': 'links',
    'ap': 'aphorism',
    'qu': 'question',
})
`
endsnippet

snippet lnk:links
links
endsnippet

snippet :instruction: "instruction meta data"
:protocols: P00X.Y
:instruction: instruction$0
:uuid: `!p if not snip.c: snip.rv = _uuid()`
:roles: roles
:name: 
:ai-role: ai-roles
:difficulty: difficulty
:related-to: 
:tags: tag
endsnippet


snippet role "role for the protocol compendium"
$1`!p dict_expand({
    'see':'seeker', 
    'gui':'guide', 
    'can':'candidate', 
    'onb':'onboarder',
    'men':'mentor'
})
`
endsnippet

snippet roles "role for the protocol compendium"
$1`!p dict_expand({
    'see':'+seeker', 
    'gui':'+guide', 
    'can':'+candidate', 
    'onb':'+onboarder',
    'men':'+mentor'
})
`
endsnippet

snippet see:+seeker
seeker, roles
endsnippet

snippet gui:+guide
guide, roles
endsnippet

snippet can:+candidate
candidate, roles
endsnippet

snippet onb:+onboarder
onboarder, roles
endsnippet

snippet men:+mentor
mentor
endsnippet

snippet difficulty "competency requirement for the protocol compendium"
$1`!p dict_expand({
    'beg':'beginner', 
    'dev':'developing', 
    'com':'competent', 
    'prof':'proficient',
    'ex':'expert'
})
`
endsnippet

snippet ai-role "ai-role for the protocol compendium"
$1`!p dict_expand({
    'so': 'strategic-oversight',
    'kb': 'knowledge-builder',
    'mm': 'map-maker',
    'ep': 'event-planner',
    'pc': 'performance-coach',
    'fb': 'focus-booster',
    'fix': 'fixer',
    'dip': 'diplomat',
    'spy': 'spy'
})
`
endsnippet

snippet ai-all "all ai-roles"
strategic-oversight, knowledge-builder, map-maker, event-planner, performance-coach, focus-booster, fixer, diplomat, spy
endsnippet

snippet so:strategic-oversight
strategic-oversight
endsnippet

snippet kb:knowledge-builder
knowledge-builder
endsnippet

snippet mm:map-maker
map-maker
endsnippet

snippet ep:event-planner
event-planner
endsnippet

snippet pc:performance-coach
performance-coach
endsnippet

snippet fb:focus-booster
focus-booster
endsnippet


snippet ai-roles "ai-role for the protocol compendium"
$1`!p dict_expand({
    'so': '+strategic-oversight',
    'kb': '+knowledge-builder',
    'mm': '+map-maker',
    'ep': '+event-planner',
    'pc': '+performance-coach',
    'fb': '+focus-booster',
    'fix': '+fixer',
    'dip': '+diplomat',
    'spy': '+spy'
})
`
endsnippet

snippet so:+strategic-oversight
strategic-oversight, ai-roles
endsnippet

snippet kb:+knowledge-builder
knowledge-builder, ai-roles
endsnippet

snippet mm:+map-maker
map-maker, ai-roles
endsnippet

snippet ep:+event-planner
event-planner, ai-roles
endsnippet

snippet pc:+performance-coach
performance-coach, ai-roles
endsnippet

snippet fb:+focus-booster
focus-booster, ai-roles
endsnippet

snippet fix:+fixer
fixer, ai-roles
endsnippet

snippet dip:+diplomat
diplomat, ai-roles
endsnippet

snippet spy:+spy
spy
endsnippet

snippet tag "tag type for the protocol compendium"
$1`!p snip.rv=from_options(t[1], [
'fundamentals',
'metacognition',
'deception',
'innovation',
'communications',
'negotiation',
'learning',
'competition',
'troubleshooting',
'design',
'leadership',
'management',
'bureaucracies',
])`
endsnippet

snippet tag-all "tag type for the protocol compendium"
fundamentals, metacognition, deception, innovation, communications, negotiation, learning, competition, troubleshooting, design, leadership, management, bureaucracies
endsnippet

